/*
A controller to handle HTTP requests in regards to Team class
 */
package com.daimler.taskrservice.controller;

import com.daimler.taskrservice.model.Team;
import com.daimler.taskrservice.model.TeamMember;
import com.daimler.taskrservice.repository.TeamMemberRepository;
import com.daimler.taskrservice.repository.TeamRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController //This means that this class is a Controller
@RequestMapping("/api/team") // This means URL's start with /api/team (after Application path)
public class TeamController {

    private static final Logger logger = LoggerFactory.getLogger(TeamController.class);

    @Autowired //This means to get the bean called teamRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    TeamRepository teamRepository;

    @Autowired
    TeamMemberRepository teamMemberRepository;

    @PostMapping(path="/create") // Map ONLY POST Requests to add a new team
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    public @ResponseBody Team createTeam(@RequestParam String name){
        //Here we just create a new team object from the parameters passed to our API call and saves it to the database
        Team t = new Team();
        t.setTeamname(name);
        return teamRepository.saveAndFlush(t);
    }


    @GetMapping(path="/getAll")  // Map ONLY GET Requests to retrieve all the teams
    public @ResponseBody Iterable<Team> getAllTeams(){
        return teamRepository.findAll(); // This returns a JSON or XML with the users
    }

    //Getting a particular team
    @GetMapping(path="{id}")
    public @ResponseBody Team getTeam(@PathVariable long id){
        return teamRepository.getOne(id);
    }

    //This GET method is to return all the team members for a particular team
    @GetMapping(path="{id}/getMembers")
    public @ResponseBody List<TeamMember> getTeamMembers(@PathVariable long id){
        return teamMemberRepository.findByTeam(teamRepository.getOne(id));
    }
}
